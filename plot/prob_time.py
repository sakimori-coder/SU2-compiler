import numpy as np
from matplotlib import pyplot as plt
import japanize_matplotlib



eps = [0.10000000000000000555, 0.031622776601683795873, 0.01000000000000000106, 0.0031622776601683797468, 0.0010000000000000001564, 0.00031622776601683799064, 0.00010000000000000002069, 3.1622776601683800659e-05, 1.0000000000000002573e-05, 3.1622776601683802254e-06, 1.0000000000000003078e-06, 3.162277660168380385e-07, 1.0000000000000003582e-07, 3.1622776601683805445e-08, 1.0000000000000004086e-08, 3.162277660168380704e-09, 1.0000000000000004591e-09, 3.1622776601683808636e-10, 1.0000000000000005095e-10, 3.1622776601683810231e-11, 1.00000000000000056e-11, 3.1622776601683811826e-12, 1.0000000000000006104e-12, 3.1622776601683813422e-13, 1.0000000000000006609e-13, 3.1622776601683815017e-14, 1.0000000000000007113e-14, 3.1622776601683816612e-15, 1.0000000000000007618e-15, 3.1622776601683818208e-16, 1.0000000000000008122e-16, 3.1622776601683819803e-17, 1.0000000000000008627e-17, 3.1622776601683821398e-18, 1.0000000000000009131e-18, 3.1622776601683822993e-19, 1.0000000000000009636e-19, 3.1622776601683824589e-20, 1.000000000000001014e-20, ]
TIME = [1404.5739900000000944, 2852.0668300000015734, 4920.7884400000002643, 6963.8853200000003199, 8864.6371700000017881, 11052.1205600000103, 13264.651140000012674, 15258.435290000017631, 17405.224670000028709, 19653.750730000025214, 21937.749630000027537, 24280.415700000034121, 26912.996100000040315, 29586.388960000029329, 32219.990900000037072, 35133.577650000021094, 38257.12124000001495, 41908.210000000050059, 45881.468060000042897, 50623.233760000031907, 56893.626950000041688, 63746.415850000063074, 72486.876440000080038, 84660.300770000074408, 99641.257710000092629, 119819.295610000132, 146471.12225000013132, 183657.93431000012788, 238747.10742000027676, 323105.43529000028502, 434797.86110000056215, 615713.44768000056501, 893129.70157000096515, ]
eps = eps[:len(TIME)]

print(len(eps))
print(len(TIME))
print(eps[:len(TIME)+1])

log_eps = np.log(eps)
log_TIME = np.log(TIME)
a, b = np.polyfit(log_eps[-10:], log_TIME[-10:], 1)
print(a, np.exp(b))

# y_scale = [0.3 * np.power(eps[i], -0.6) for i in range(len(eps))]
y_scale = [np.exp(b) * np.power(eps[i], a) for i in range(len(eps))]


clr = plt.cm.Purples(0.9)
fig, ax = plt.subplots()
ax.scatter(eps, TIME, color="red")
ax.plot(eps, y_scale, "--", color="blue", label="$t = 106\epsilon^{-0.23}$")
ax.grid()


ax.set_xscale("log")
ax.set_yscale("log")
eps.reverse()
ax.set_xticks(eps)
ax.invert_xaxis()
# ax.set_xlim(0.2, 0.5*1e-10)
ax.set_ylim(1e3, 1.1*1e6)


ax.set_xticks([10**(-i) for i in range(1, 18, 2)])
ax.set_xlabel("近似精度 ε", fontsize=18)
ax.set_ylabel("時間[ms]", fontsize=18)
# ax.set_title("決定的Clifford+$T$分解アルゴリズム", fontsize=18)

# handles, labels = ax.get_legend_handles_labels()
# new_handles = []
# new_labels = []
# new_handles.append(handles[2])
# new_handles.append(handles[3])
# new_handles.append(handles[0])
# new_handles.append(handles[4])
# new_handles.append(handles[5])
# new_handles.append(handles[1])

# new_labels.append(labels[2])
# new_labels.append(labels[3])
# new_labels.append(labels[0])
# new_labels.append(labels[4])
# new_labels.append(labels[5])
# new_labels.append(labels[1])

# ax.legend(loc="upper left", handles=new_handles, labels=new_labels)
ax.legend(loc="upper left", fontsize=15)

plt.savefig("plot/prob_time.pdf", dpi=500)
